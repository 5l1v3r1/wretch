{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/perfs.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","declare const global\n\nconst config = {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null,\n    // Polyfills\n    polyfills: {\n        fetch: null,\n        FormData: null,\n        URLSearchParams: null,\n        performance: null,\n        PerformanceObserver: null,\n        AbortController: null\n    },\n    polyfill(p: string, doThrow = true, instance = false, ...args) {\n        const res = this.polyfills[p] ||\n            (typeof self !== \"undefined\" ? self[p] : null) ||\n            (typeof global !== \"undefined\" ? global[p] : null)\n        if(doThrow && !res) throw new Error(p + \" is not defined\")\n        return instance && res ? new res(...args) : res\n    }\n}\n\nexport default config\n","import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings) _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", false)\n        const _observer  = conf.polyfill(\"PerformanceObserver\", false)\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport perfs from \"./perfs\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\nexport type ResponseChain = {\n    // Response types\n    res: <Result = Response>(cb?: (type: Response) => Result) => Promise<Result>,\n    json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n    blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n    formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n    arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n    text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n    // Extras\n    perfs: (cb?: (type: any) => void) => ResponseChain,\n    setTimeout: (time: number, controller: any) => ResponseChain,\n    controller: () => [any, ResponseChain],\n    // Catchers\n    error: (code: (number | string), cb: any) => ResponseChain,\n    badRequest: (cb: (error: WretcherError) => void) => ResponseChain,\n    unauthorized: (cb: (error: WretcherError) => void) => ResponseChain,\n    forbidden: (cb: (error: WretcherError) => void) => ResponseChain,\n    notFound: (cb: (error: WretcherError) => void) => ResponseChain,\n    timeout: (cb: (error: WretcherError) => void) => ResponseChain,\n    internalError: (cb: (error: WretcherError) => void) => ResponseChain,\n    onAbort: (cb: (error: Error) => void) => ResponseChain\n}\n\nexport const resolver = url =>\n        (catchers: Map<number | string, (error: WretcherError) => void> = new Map()) =>\n        (resolvers: Array<(chain: ResponseChain) => ResponseChain & Promise<any>>) =>\n        (opts = {}) => {\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const finalOpts = mix(conf.defaults, opts)\n    const fetchController = conf.polyfill(\"AbortController\", false, true)\n    if(!finalOpts[\"signal\"] && fetchController) {\n        finalOpts[\"signal\"] = fetchController.signal\n    }\n\n    const req = conf.polyfill(\"fetch\")(url, finalOpts)\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    const doCatch = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            if(catchers.has(err.status))\n                catchers.get(err.status)(err)\n            else if(catchers.has(err.name))\n                catchers.get(err.name)(err)\n            else\n                throw err\n        })\n    }\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseChain: ResponseChain = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<Response>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Performs a callback on the API performance timings of the request.\n         *\n         * Warning: Still experimental on browsers and node.js\n         */\n        perfs: cb => {\n            req.then(res => perfs.observe(res.url, cb))\n            return responseChain\n        },\n        /**\n         * Aborts the request after a fixed time.\n         *\n         * @param time Time in milliseconds\n         * @param controller A custom controller\n         */\n        setTimeout: (time, controller = fetchController) => {\n            setTimeout(() => controller.abort(), time)\n            return responseChain\n        },\n        /**\n         * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n         */\n        controller: () => [ fetchController, responseChain ],\n        /**\n         * Catches an http response with a specific error code or name and performs a callback.\n         */\n        error(errorId, cb) {\n            catchers.set(errorId, cb)\n            return responseChain\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseChain.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseChain.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseChain.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseChain.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseChain.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseChain.error(500, cb),\n        /**\n         * Catches an AbortError and performs a callback.\n         */\n        onAbort: cb => responseChain.error(\"AbortError\", cb)\n    }\n\n    return resolvers.reduce((chain, r) => r(chain), responseChain) as (ResponseChain & Promise<any>)\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError, ResponseChain } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        private _url: string,\n        private _options: RequestInit,\n        private _catchers: Map<number | string, (error: WretcherError) => void> = new Map(),\n        private _resolvers: Array<(resolver: ResponseChain) => any> = []) {}\n\n    static factory(url = \"\", opts: RequestInit = {}) { return new Wretcher(url, opts) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers, resolvers = this._resolvers } = {}) {\n        return new Wretcher(url, options, catchers, resolvers)\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(opts: RequestInit, mixin = false) {\n        conf.defaults = mixin ? conf.defaults = mix(conf.defaults, opts) : opts\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills}\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean If true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        return replace ? this.selfFactory({ url }) : this.selfFactory({ url: this._url + url })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: RequestInit, mixin = true) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Authorization\" header.\n     * @param headerValue Header value\n     */\n    auth(headerValue: string) {\n        return this.headers({ Authorization: headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param errorId Error code or name\n     * @param catcher: The catcher method\n     */\n    catcher(errorId: number | string, catcher: (error: WretcherError) => void) {\n        const newMap = new Map(this._catchers)\n        newMap.set(errorId, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: any) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal } as any })\n    }\n\n    /**\n     * Program a resolver to perform response chain tasks automatically.\n     * @param doResolve : Resolver callback\n     */\n    resolve(doResolve: (chain: ResponseChain) => ResponseChain | Promise<any>, clear: boolean = false) {\n        return this.selfFactory({ resolvers: clear ? [ doResolve ] : [ ...this._resolvers, doResolve ]})\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n    /**\n     * Performs a head request.\n     */\n    head(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"HEAD\" })\n    }\n    /**\n     * Performs an options request\n     */\n    opts(opts = {}) {\n        return resolver(this._url)(this._catchers)(this._resolvers)({ ...mix(opts, this._options), method: \"OPTIONS\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        return this.body(convertFormData(formObject))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = conf.polyfill(\"URLSearchParams\", true, true)\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n\nconst convertFormData = (formObject: object) => {\n    const formData = conf.polyfill(\"FormData\", true, true)\n    for(const key in formObject) {\n        if(formObject[key] instanceof Array) {\n            for(const item of formObject[key])\n                formData.append(key + \"[]\", item)\n        } else {\n            formData.append(key, formObject[key])\n        }\n    }\n\n    return formData\n}\n\nconst convertFormUrl = (formObject: object) => {\n    return Object.keys(formObject)\n        .map(key =>\n            encodeURIComponent(key) + \"=\" +\n            `${ encodeURIComponent(typeof formObject[key] === \"object\" ? JSON.stringify(formObject[key]) : formObject[key]) }`)\n        .join(\"&\")\n}\n","import { Wretcher } from \"./wretcher\"\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default Wretcher.factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","config","defaults","errorType","polyfills","fetch","FormData","URLSearchParams","performance","PerformanceObserver","AbortController","polyfill","p","doThrow","instance","_i","args","res","this","self","global","Error","onMatch","entries","name","callback","_performance","matches","getEntriesByName","length","reverse","clearMeasures","perfs","callbacks","delete","size","observer","disconnect","clearResourceTimings","lazyObserver","_observer","forEach","Map","observe","conf","entryTypes","set","resolver","url","catchers","resolvers","opts","finalOpts","fetchController","signal","req","wrapper","then","response","ok","_","err","status","doCatch","promise","catch","has","get","wrapTypeParser","funName","cb","responseChain","json","blob","formData","arrayBuffer","text","setTimeout","time","controller","abort","error","errorId","badRequest","unauthorized","forbidden","notFound","timeout","internalError","onAbort","reduce","chain","r","_url","_options","_catchers","_resolvers","Wretcher","_a","_b","_c","_d","options","_e","_f","mixin","method","replace","selfFactory","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","Authorization","catcher","newMap","__assign","doResolve","clear","contents","body","jsObject","content","JSON","stringify","formObject","convertFormData","input","convertFormUrl","usp","index","indexOf","key","val","append","substring","toString","item","Object","keys","map","encodeURIComponent","join","factory"],"mappings":"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"}